<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_fix">
    <sys_script_fix action="INSERT_OR_UPDATE">
        <before>false</before>
        <description/>
        <name>piFroxSemaphoreLoginTest</name>
        <record_for_rollback>true</record_for_rollback>
        <script><![CDATA[// fetch the System properties to trigger the interface
var uri = gs.getProperty('pi.frox.semaphore.uri');
var auth = gs.getProperty('pi.frox.semaphore.auth');
var pass = gs.getProperty('pi.frox.semaphore.password');
var mid = gs.getProperty('pi.frox.semaphore.midserver');

// Sample code to test Semaphore login using MID Server
var requestBody = {};
var responseHeader;
var responseBody;
var status;
var sm;

// Set the request body
requestBody.auth = auth;
requestBody.password = pass;

// Make the REST call to Semaphore UI API
try{
	sm = new sn_ws.RESTMessageV2('pi.frox.semaphore.authentication', 'POST  /auth/login'); // Might throw exception if message doesn't exist or not visible due to scope.
	sm.setEndpoint(uri + 'auth/login');
	sm.setRequestBody(JSON.stringify(requestBody));
	sm.setMIDServer(mid);
	response = sm.executeAsync(); // Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.

	response.waitForResponse(60); // In seconds. Wait at most 60 seconds to get response from ECC Queue/Mid Server. Might throw exception timing out waiting for response in ECC queue.

	responseCookies = response.haveError() ? response.getErrorMessage() : response.getCookies();
	var cookie = responseCookies.toString().replace('[','').replace('; Path=/]','');

	responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
	status = response.getStatusCode();
} catch(ex) {
	responseBody = ex.getMessage();
	status = '500';
} finally {
	requestBody = sm ? sm.getRequestBody():null;
}
gs.info('Request Body: ' + requestBody);
gs.info('Cookie : ' + cookie);
gs.info('HTTP Status: ' + status);]]></script>
        <sys_class_name>sys_script_fix</sys_class_name>
        <sys_created_by>david.ogea</sys_created_by>
        <sys_created_on>2024-09-06 15:31:23</sys_created_on>
        <sys_id>0c75816c47a01210a266daf1d16d438a</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>piFroxSemaphoreLoginTest</sys_name>
        <sys_package display_value="PiFroxDemo" source="2e52d73947909210a266daf1d16d43f5">2e52d73947909210a266daf1d16d43f5</sys_package>
        <sys_policy/>
        <sys_scope display_value="PiFroxDemo">2e52d73947909210a266daf1d16d43f5</sys_scope>
        <sys_update_name>sys_script_fix_0c75816c47a01210a266daf1d16d438a</sys_update_name>
        <sys_updated_by>david.ogea</sys_updated_by>
        <sys_updated_on>2024-09-09 08:33:45</sys_updated_on>
        <unloadable>false</unloadable>
    </sys_script_fix>
</record_update>
