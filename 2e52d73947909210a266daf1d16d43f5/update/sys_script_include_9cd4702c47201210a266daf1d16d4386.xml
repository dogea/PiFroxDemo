<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>global.piFroxUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>piFroxUtils</name>
        <script><![CDATA[var piFroxUtils = Class.create();
piFroxUtils.prototype = {
    initialize: function() {
        // fetch the System properties to trigger the interface
        this.uri = gs.getProperty('pi.frox.semaphore.uri');
        this.auth = gs.getProperty('pi.frox.semaphore.auth');
        this.pass = gs.getProperty('pi.frox.semaphore.password');
        this.mid = gs.getProperty('pi.frox.semaphore.midserver');
    },

    // This function triggers the the task on the SemaphoreUI REST API
    semStartJob: function(projectId, payload) {
        // Initialize variables for the REST API call
        var responseHeader;
        var responseBody;
        var status;
        var sm;
        try {
            sm = new sn_ws.RESTMessageV2('pi.frox.semaphore.project', 'POST /project/{project_id}/tasks'); // Might throw exception if message doesn't exist or not visible due to scope.
            sm.setEndpoint(this.uri + 'project/' + projectId + '/tasks');
            sm.setRequestBody(JSON.stringify(payload));
            sm.setRequestHeader('Cookie', this._semLogin());
            sm.setMIDServer(this.mid);
            response = sm.executeAsync(); // Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.
            response.waitForResponse(60); // Wait at most 60 seconds to get response from ECC Queue/Mid Server. Might throw exception timing out waiting for response in ECC queue.
            responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
            status = response.getStatusCode();
        } catch (ex) {
            responseBody = ex.getMessage();
            status = '500';
        } finally {
            payload = sm ? sm.getRequestBody() : null;
        }
        return status;
    },

    // This function triggers the login to the SemaphoreUI REST API and stores the session cookie for subsequent calls
    _semLogin: function() {
        // Initialize variables for the REST API call
        var requestBody = {};
        var responseHeader;
        var responseBody;
        var status;
        var sm;
        // Set the request body
        requestBody.auth = this.auth;
        requestBody.password = this.pass;
        // Make the REST call to Semaphore UI API
        try {
            sm = new sn_ws.RESTMessageV2('pi.frox.semaphore.authentication', 'POST  /auth/login'); // Might throw exception if message doesn't exist or not visible due to scope.
            sm.setEndpoint(this.uri + 'auth/login');
            sm.setRequestBody(JSON.stringify(requestBody));
            sm.setMIDServer(this.mid);
            response = sm.executeAsync(); // Might throw exception if http connection timed out or some issue with sending request itself because of encryption/decryption of password.
            response.waitForResponse(60); // In seconds. Wait at most 60 seconds to get response from ECC Queue/Mid Server. Might throw exception timing out waiting for response in ECC queue.
            responseCookies = response.haveError() ? response.getErrorMessage() : response.getCookies();
            var cookie = responseCookies.toString().replace('[', '').replace('; Path=/]', '');
            responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
            status = response.getStatusCode();
        } catch (ex) {
            responseBody = ex.getMessage();
            status = '500';
        } finally {
            requestBody = sm ? sm.getRequestBody() : null;
        }
        return cookie;
    },

    // This function fetches the variables from the Requested Item and turns it into a stringified JSON object for the environment elemnet on SemaphoreUI REST API
    _semSetRequestBody: function(playbook, rSysId, tempId) {
        // Fetch variables for the environment
        var attr = {};
        var ritm = new GlideRecord('sc_req_item');
        ritm.get(rSysId);
        for (var i in ritm.variables) {
            if (i != 'pi_frox_body') {
                attr[i] = ritm.variables[i].toString();
            }
        }
        var jAttr = JSON.stringify(attr);
        // Build HTML Body for REST API Payload
        var body = {};
        body.template_id = tempId;
        body.debug = false;
        body.dry_run = false;
        body.diff = false;
        body.playbook = playbook;
        body.environment = jAttr;
        body.limit = '';
        return body;
    },

	// This function returns the Ansible Playbook from the Requested Item variables
	_semGetPlaybook: function(ritmSysId) {
		var playbook = '';
		var ritm = new GlideRecord('sc_req_item');
		ritm.get(ritmSysId);
		playbook = ritm.variables.pi_frox_playbook;
		return playbook;
	},

	// This function returns the Ansible Template ID from the Requested Item variables
	_semGetTemplateId: function(ritmSysId) {
		var tempId = '';
		var ritm = new GlideRecord('sc_req_item');
		ritm.get(ritmSysId);
		tempId = parseInt(ritm.variables.pi_frox_template_id);
		return tempId;
	},

    type: 'piFroxUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>david.ogea</sys_created_by>
        <sys_created_on>2024-09-06 14:18:36</sys_created_on>
        <sys_id>9cd4702c47201210a266daf1d16d4386</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>piFroxUtils</sys_name>
        <sys_package display_value="PiFroxDemo" source="2e52d73947909210a266daf1d16d43f5">2e52d73947909210a266daf1d16d43f5</sys_package>
        <sys_policy/>
        <sys_scope display_value="PiFroxDemo">2e52d73947909210a266daf1d16d43f5</sys_scope>
        <sys_update_name>sys_script_include_9cd4702c47201210a266daf1d16d4386</sys_update_name>
        <sys_updated_by>david.ogea</sys_updated_by>
        <sys_updated_on>2024-09-14 21:22:55</sys_updated_on>
    </sys_script_include>
</record_update>
